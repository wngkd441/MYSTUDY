Python 
	1991년도 귀도 반 로섬이 개발한 프로그래밍 언어
	미리 기계어로 컴파일 해두는 것이 아닌 실행 시마다 소스를 기계어로 번역해서 실행하는 인터프리터 언어로 느리지만 플랫폼에 상관없이 실행가능.
	객체 지향 언어, 함수형 언어.
	Python 3을 권장.
	IoT분야의 라즈베리파이, 빅데이터의 자료분석 등 파이썬에 대한 관심이 높아짐.
	하드웨어 성능이 좋지 않던 시기에는 실행속도가 느린 파이썬이 주목 받지 못함.
	현재는, 하드웨어의 성능 개선으로 실행 속도의 차이가 크지 않음.

변수
	파이썬에서는 모든 자료는 객체.
		Java나 C에서 사용되는 기본형 타입 변수도 파이썬에서는 객체.
	변수의 선언은 따로 없음.
		변수에 값을 초기화 시 변수가 메모리에 생성.
	하나의 변수에 다른 타입의 값을 변수에 저장할 수 있음.

자료형
	type, int, float, complex, bool, str, tuple, list, dict, set, Nonetype, function, 클래스명
	다수의 데이터를 저장할 수 있는 컨테이너
	tuple : (). 순서ㅇ, 중복ㅇ, 데이터변경x, packing - 데이터를 ,로 나열하면 tuple이 됨.
	list : []. 순서ㅇ, 중복ㅇ, 데이터변경ㅇ. tuple보다 속도가 느림.
	dictionary : {}. 순서x, 키의 중복x, 값의 중복ㅇ, 데이터변경ㅇ, 키는 불변 객체만.
	set : {}, 순서x, 중복x, 데이터변경ㅇ, 불변 객체만

List
	배열 List
	같은 타입 변수들을 하나의 이름으로 열거하여 사용하는 자료구조.
	파이썬의 리스트는 C나 Java에서의 배열과 비슷한 자료구조
	대량의 데이터를 효율적으로 처리할 수 있음.
	값을 초기화하기 전에, 변수를 미리 만들어 두어야 할 경우 - [], list()
	리스트는 배열과 달리 다양한 데이터 저장 가능, 크기를 변경할 수 있음.
	2차원 리스트 개념도 가능.
	순서가 있으므로 '시퀀스 자료형'
		순서가 존재함으로, 인덱싱과 슬라이싱의 연산 모두 적용가능.
		인덱싱 : 시퀀스 자료형에서 하나의 요소를 인덱스 연산자를 통하여 참조하는 것.
		슬라이싱 : 시퀀스 자료형의 원하는 범위를 선택하는 연산.
	함수와 연산
		len(), +, *, in, not in, min(), max(), sorted(), append(), insert(), pop(), remove(), count()
	리스트 함축
		수학에서 집합을 정의하는 표현식과 유사함.
		