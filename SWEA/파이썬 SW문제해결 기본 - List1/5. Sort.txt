정렬 Sort
	2개 이상의 자료를 특정 기준에 의해 작은 값부터 큰 값 혹은 그 반대의 순서대로 재배열하는 것.
	키 : 자료를 정렬하는 기준이 되는 특정 값
	정렬 방식 - 버블 정렬, 카운팅 정렬, 선택 정렬, 퀵 정렬, 삽입 정렬, 병합 정렬

버블 정렬
	인접한 두 개의 원소를 비교하며 자리를 계속 교환하는 방식
	1. 첫 번째 원소부터 인접한 원소끼리 계속 자리를 교환하면서 맨 마지막까지 이동
	2. 한 단계가 끝나면 가장 큰 원소 또는 가장 작은 원소가 마지막 자리로 정렬됨.
	=> 교환하며 자리를 이동하는 모습이 물 위에 올라오는 거품모양 같아서 버블 정렬이라고 함.
	시간 복잡도 = O(n^2)
	def BubbleSort(a):
		for i in range(len(a)-1, 0, -1): # 정렬할 List
			for j in range(0,i): # 범위의 끝 위치
				if a[j] > a[j+1]:
					a[j], a[j+1] = a[j+1], a[j]
	코딩이 가장 손쉬움.

카운팅 정렬
	항목들의 순서를 결정하기 위해 집합에 각 항목이 몇 개씩 있는지 세는 작업을 하여, 선형 시간에 정렬하는 효율적인 알고리즘
	정수나 정수로 표현할 수 있는 자료에 대해서만 적용 가능.
	카운트들의 충분한 공간을 할당하려면 집합 내의 가장 큰 정수를 알아야 함.
	1. Data에서 각 항목들의 발생 횟수를 세고, 정수 항목들로 직접 인덱스되는 카운트 리스트 COUNTS에 저장.
	2. 정렬된 집합에서 각 항목의 앞에 위치할 항목의 개수를 반영하기 위해 COUNTS의 원소를 조정.
	3. DATA의 마지막 원소부터 확인 - 해당 원소가 COUNTS에 있는 항목(=COUNTS[1])을 1 감소시키고 TEMP의 COUNTS[1]의 값 위치(=TEMP[4])에 1을 삽입.
	4. COUNTS[4]를 감소시키고 TEMP에 4를 삽입.
	5. COUNTS[2]를 감소시키고 TEMP에 2를 삽입.
	6. COUNTS[1]을 감소시키고 TEMP에 1을 삽입.
	7. COUNTS[3]을 감소시키고 TEMP에 3을 삽입.
	8. COUNTS[1]을 감소시키고 TEMP에 1을 삽입.
	9. COUNTS[4]를 감소시키고 TEMP에 4를 삽입.
	10. COUNTS[0]을 감소시키고 TEMP에 0을 삽입.
	11. TEMP 업데이트 완료하고 정렬 작업을 종료.
	시간 복잡도 = O(n+k) (n: 리스트 개수, k: 정수의 최대값)
	def CountingSort(A, B, k):
	# A[1 .. n] : 입력 리스트 사용된 숫자 (1~k)
	# B[1 .. n] : 정렬된 리스트
	# C[1 .. k] : 카운트 리스트
		C = [0] * k
		for i in range(0, len(B)):
			C[A[i]] += 1
		for i in range(1, len(C)):
			C[i] += C[i-1]
		for i in range(len(B)-1, -1, -1):
			B[C[A[i]]-1] = A[i]
			C[A[i]] -= 1
	a = [0,4,1,3,1,2,4,1]
	b = [0]*len(a)
	CountingSort(a,b,5)
	print(b)
	n이 비교적 작을 때만 가능.
	